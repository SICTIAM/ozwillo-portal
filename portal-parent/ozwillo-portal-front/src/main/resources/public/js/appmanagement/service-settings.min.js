var Service=React.createClass({displayName:"Service",getInitialState:function(){return{service:this.props.service,saved_service:this.props.service,field_errors:[]}},updateServiceLocally:function(fieldname,fieldvalue){var state=this.state;"geographical_areas"===fieldname?state.service.service.geographical_areas=[fieldvalue]:state.service.service[fieldname]=fieldvalue,this.setState(state)},saveService:function(){$.ajax({url:apps_service+"/service/"+this.props.service.service.id,type:"post",dataType:"json",contentType:"application/json",data:JSON.stringify(this.state.service.service),success:function(data){if(data.success)this.refs.settings.close(),this.reloadService();else{var s=this.state;s.field_errors=data.errors,this.setState(s)}}.bind(this),error:function(xhr,status,err){}.bind(this)})},reloadService:function(){$.ajax({url:apps_service+"/service/"+this.props.service.service.id,type:"get",dataType:"json",success:function(data){var s=this.state;s.saved_service=data,s.field_errors=[],this.setState(s)}.bind(this),error:function(xhr,status,err){}.bind(this)})},settings:function(event){event.preventDefault();var s=this.state;s.service=JSON.parse(JSON.stringify(s.saved_service)),s.field_errors=[],this.setState(s),this.refs.settings.open()},pushToDash:function(event){event.preventDefault(),this.refs.users.init(),this.refs.pushToDash.open()},savePushToDash:function(){this.refs.pushToDash.close(),$.ajax({url:apps_service+"/users/service/"+this.props.service.service.id,dataType:"json",contentType:"application/json",type:"post",data:JSON.stringify(this.refs.users.getSelectedUsers()),error:function(xhr,status,err){}.bind(this)})},loadUsers:function(callback,error){$.ajax({url:apps_service+"/users/service/"+this.props.service.service.id,dataType:"json",type:"get",success:callback,error:function(xhr,status,err){void 0!=error&&error()}.bind(this)})},queryUsers:function(query,callback){$.ajax({url:apps_service+"/users/instance/"+this.props.instance+"?app_admin=true&q="+query,dataType:"json",type:"get",success:callback,error:function(xhr,status,err){}.bind(this)})},componentDidMount:function(){$("a.tip",this.getDOMNode()).tooltip()},render:function(){var links=[React.createElement("button",{onClick:this.settings,className:"btn btn-default tip",disabled:"STOPPED"===this.props.status,"data-toggle":"tooltip","data-placement":"top",title:t("settings")},React.createElement("i",{className:"fa fa-cog"}))];return this.state.saved_service.service.visible||links.push(React.createElement("button",{onClick:this.pushToDash,className:"btn btn-default tip",disabled:"STOPPED"===this.props.status,"data-toggle":"tooltip","data-placement":"top",title:t("users")},React.createElement("i",{className:"fa fa-home"}))),React.createElement("div",{className:"row form-table-row"},React.createElement("div",{className:"col-sm-10"},this.state.saved_service.service.name),React.createElement("div",{className:"col-sm-2"},links),React.createElement(ServiceSettings,{ref:"settings",service:this.state.service,errors:this.state.field_errors,update:this.updateServiceLocally,save:this.saveService}),React.createElement(Modal,{title:t("users"),ref:"pushToDash",successHandler:this.savePushToDash},React.createElement("div",null,t("push-to-dashboard-existing-user")),React.createElement(UserPicker,{ref:"users",users:this.loadUsers,source:this.queryUsers})))}}),FormField=React.createClass({displayName:"FormField",render:function(){var className;return className=this.props.error?"control-label col-sm-2 error":"control-label col-sm-2",React.createElement("div",{className:"form-group"},React.createElement("label",{htmlFor:this.props.name,className:className},t(this.props.name)),React.createElement("div",{className:"col-sm-10"},this.props.children))}}),ServiceSettings=React.createClass({displayName:"ServiceSettings",getInitialState:function(){return{service:this.props.service,refreshedIconUrl:this.props.service.iconUrl}},handleChange:function(field,checkbox){return function(event){checkbox?this.props.update(field,event.target.checked):"geographical_areas"===field?this.props.update(field,event.val):this.props.update(field,event.target.value)}.bind(this)},open:function(){this.refs.modal.open()},close:function(){this.refs.modal.close()},updateUploadedIcon:function(servedImageUrlData){this.props.update("icon",servedImageUrlData),this.props.update("iconUrl",servedImageUrlData);var state=this.state;this.state.refreshedIconUrl=servedImageUrlData+"#"+(new Date).getTime(),this.state.service.service.icon=servedImageUrlData,this.state.service.iconUrl=servedImageUrlData,this.setState(state)},render:function(){var iconClassName="control-label col-sm-2";-1!=$.inArray("icon",this.props.errors)&&(iconClassName+=" error");var visibility=null;return visibility=this.props.service.service.restricted?React.createElement("div",{className:"form-group"},React.createElement("div",{className:"col-sm-10 col-sm-offset-2"},React.createElement("p",null,t("restricted-service")))):React.createElement("div",{className:"form-group"},React.createElement("div",{className:"col-sm-10 col-sm-offset-2"},React.createElement("input",{className:"switch",type:"checkbox",id:"published",checked:this.props.service.service.visible,onChange:this.handleChange("visible",!0)}),React.createElement("label",{htmlFor:"published"},this.props.service.service.visible?t("published"):t("notpublished")))),React.createElement(Modal,{title:this.props.service.name,ref:"modal",successHandler:this.props.save,large:!0},React.createElement("form",{className:"form-horizontal",role:"form"},React.createElement(FormField,{name:"name",error:-1!=$.inArray("name",this.props.errors)},React.createElement("input",{type:"text",name:"name",id:"name",className:"form-control",value:this.props.service.service.name,onChange:this.handleChange("name")})),React.createElement(FormField,{name:"description",error:-1!=$.inArray("description",this.props.errors)},React.createElement("textarea",{name:"description",id:"description",className:"form-control",value:this.props.service.service.description,onChange:this.handleChange("description")})),React.createElement("div",{className:"form-group"},React.createElement("label",{htmlFor:"icon",className:iconClassName},t("icon")),React.createElement("div",{className:"controls col-sm-1"},React.createElement("img",{src:this.state.refreshedIconUrl})),React.createElement("div",{className:"controls col-sm-9"},React.createElement("input",{name:"icon",type:"text",id:"icon",className:"form-control",value:this.props.service.service.icon,onChange:this.handleChange("icon")})),React.createElement("div",{className:"controls col-sm-9"},React.createElement("div",{className:"form-control btn btn-default btn-upload"},React.createElement("label",null,t("upload")),React.createElement(FileUploadInput,{className:"upload",uploadUrl:"/media/objectIcon/"+this.props.service.service.id,success:this.updateUploadedIcon})))),React.createElement(FormField,{name:"geographical-area-of-interest",error:-1!=$.inArray("description",this.props.errors)},React.createElement(GeoSingleSelect2Component,{className:"form-control",ref:"geoSearch",name:"geoAreaOfInterest",key:this.props.service.service.geographical_areas,urlResources:store_service+"/geographicalAreas",onChange:this.handleChange("geographical_areas"),countryFilter:{country_uri:""},placeholder:this.props.service.service.geographical_areas&&0!==this.props.service.service.geographical_areas.length?decodeURIComponent(this.props.service.service.geographical_areas[0]).substring(this.props.service.service.geographical_areas[0].lastIndexOf("/")+1):" "})),visibility))}});
